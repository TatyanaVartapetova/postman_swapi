{
	"info": {
		"_postman_id": "3f6bed5f-76e7-47e1-9cd0-5f707e0d2b89",
		"name": "swapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25434654"
	},
	"item": [
		{
			"name": "test suite1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. correct response format json\r",
							"pm.test(\"correct response format json\", function() {\r",
							"pm.response.to.have.jsonBody()\r",
							"});\r",
							"//2. we have all declared fields in the response\r",
							"pm.test(\"we have all declared fields in the response\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"people\")\r",
							"    pm.expect(jsonData).to.have.property(\"planets\")\r",
							"    pm.expect(jsonData).to.have.property(\"films\")\r",
							"    pm.expect(jsonData).to.have.property(\"species\")\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\")\r",
							"    pm.expect(jsonData).to.have.property(\"starships\")\r",
							"});\r",
							"//3. field value is not null\r",
							"pm.test(\"field value is not null\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							" \r",
							"});\r",
							"// 4 fields not empty (вместо null просто кавычки)\r",
							"// 5 check if field corresponds to a specific value\r",
							"pm.test(\"check if field corresponds to a specific value\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							" \r",
							"});\r",
							"// 6. status code is 200 \r",
							"pm.test(\"status code is 200 \", function() {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 7. status message is OK\r",
							"pm.test(\"status message is OK \", function() {\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 8. response time is less than 1000ms\r",
							"pm.test(\"response time is less than 1000ms\", function() {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 9. there is a specific header in the response \r",
							"pm.test(\"there is a specific header in the response\", function() {\r",
							"pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// 10. the response has a specific header with the specific value\r",
							"pm.test(\"the response has a specific header with the specific value\", function() {\r",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");\r",
							"});\r",
							"\r",
							"// 11. Cookie exists непонятный кейс помоему не работает\r",
							"pm.test(\"Cookie exists\", function() {\r",
							"pm.cookies.has(\"\");\r",
							"});\r",
							"\r",
							"// 12. Cookie has value\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "json shema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"};\r",
							"pm.test (\"Body is correct\", function(){\r",
							"    // tv4 библиотека для json схем\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "json schema2 (people)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"},\r",
							"        },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"},\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"},\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"},\r",
							"        },\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body is correct\", function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock server",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "mock server",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 11 May 2023 19:04:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "164"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=1a02c27172ee20bc"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c58356be6ecff815"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1683831934"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n    }\n}"
				}
			]
		},
		{
			"name": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io/action",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\":\"Tanya\"\r\n\r\n}"
				},
				"url": {
					"raw": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io/action",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"Tanya\"\r\n\r\n}"
						},
						"url": {
							"raw": "https://bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"bb81aa91-3e76-4e8e-8bbb-1214ca32d7f3",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 11 May 2023 19:12:00 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "150"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a61988ae4c56c979"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=645795476468b165"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1683832380"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Tanya\",\n        \"message\": \"User created.\",\n\n    }\n}"
				}
			]
		}
	]
}